
<%= form_for(@post) do |f| %>

<p>
  <%= f.label :title %>
  <%= f.text_field :title %>
</p>

<p>
  <%= f.label :content %>
  <%= f.text_area :content %>
</p>
<% if false %>
<%# in html, easier to understand %>
<% Category.all.each do |c| %>
  <label for="category_id_<%= c.id %>"><%= c.name %></label>
  <input type="checkbox" name="post[category_ids][]" value="<%= c.id %>" id="category_id_<%= c.id %>">
<% end %>

<input type="text" id="post_categories_attributes_0_name" name="post[categories_attributes][0][name]" >
<input type="text" id="post_categories_attributes_1_name" name="post[categories_attributes][1][name]" >
<% end %>
<%# How can I build a checkbox for each category %>
<%# a bunch of checkboxes based on categories for the post's category ids %>
<%= f.collection_check_boxes( :category_ids, Category.all, :id, :name) do |b| %>
  <p>
    <%= b.label %>
    <%= b.check_box %>
  </p>
  <% end %>
<%# will generate a checkbox named post[category_ids][] for each category in Category.all%>
<%# it will use the :id as the valuefor the checkbox and it will use the :name method as the label for the checkbox %>
    <%#= f.fields_for :categories, post.categories.build do |c| %>
        <%#= c.text_field :name, placeholder: "Cateogry Name" %>
    <%#end%>
    <%= f.fields_for :categories do |category_builder| %>
      <%= category_builder.text_field :name %>
    <% end %>

    <%# if you comment out the method for categories_attributes in the post model, it changes the structure of the params. why?
    # 1. f is attached to the post
    # 2. the fields_for method looks to see if the object (post) attached to f respondsto a method called categories_attributes=
    # 3a. if the underlying object (post) does respond to that method, fields_for knows you're buildinga nested form
    # 3b. if the underlying object does not respond to that method, field_for assumes you're doing something custom %>

<%= f.submit %>

<% end %>